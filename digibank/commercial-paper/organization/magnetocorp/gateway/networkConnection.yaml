---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "fabric-paper"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "Papernet"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  papernet:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("MagnetoCorp" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer.MagnetoCorp.com

    # Required. list of peers from participating orgs
    peers:
      peer0.MagnetoCorp.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      peer1.MagnetoCorp.com:
        endorsingPeer: true
        chaincodeQuery: false
        ledgerQuery: true
        eventSource: true
        
      peer2.MagnetoCorp.com:
        endorsingPeer: true
        chaincodeQuery: false
        ledgerQuery: true
        eventSource: true

#
# list of participating organizations in this network
#
organizations:
  MagnetoCorp:
    mspid: MagnetoCorpMSP

    peers:
      - peer0.MagnetoCorp.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca-MagnetoCorp
      
    adminPrivateKey:
      path: /home/hyper/fabric/fabric-paper-sdk/crypto-config/peerOrganizations/MagnetoCorp.com/users/Admin@MagnetoCorp.com/msp/keystore/key.pem
    signedCert:
      path: /home/hyper/fabric/fabric-paper-sdk/crypto-config/peerOrganizations/MagnetoCorp.com/users/Admin@MagnetoCorp.com/msp/signcerts/Admin@MagnetoCorp.com-cert.pem

      
  # DigiBank:
    # mspid: DigiBankMSP
    # peers:
      # - peer0.DigiBank.com
    # certificateAuthorities:
      # - ca-DigiBank
      
    # adminPrivateKey:
      # path: /home/hyper/fabric/fabric-paper-sdk/crypto-config/peerOrganizations/DigiBank.com/users/Admin@DigiBank.com/msp/keystore/key.pem
    # signedCert:
      # path: /home/hyper/fabric/fabric-paper-sdk/crypto-config/peerOrganizations/DigiBank.com/users/Admin@DigiBank.com/msp/signcerts/Admin@DigiBank.com-cert.pem

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.MagnetoCorp.com:
    url: grpcs://localhost:7950

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.MagnetoCorp.com
   
    tlsCACerts:
      path: /home/hyper/fabric/fabric-paper-sdk/crypto-config/ordererOrganizations/MagnetoCorp.com/tlsca/tlsca.MagnetoCorp.com-cert.pem
#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.MagnetoCorp.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:7051

    grpcOptions:
      ssl-target-name-override: peer0.MagnetoCorp.com
      request-timeout: 120001
    tlsCACerts:
      path: /home/hyper/fabric/fabric-paper-sdk/crypto-config/peerOrganizations/MagnetoCorp.com/tlsca/tlsca.MagnetoCorp.com-cert.pem
      
  # peer0.DigiBank.com:
    # url: grpcs://localhost:8051
    # grpcOptions:
      # ssl-target-name-override: peer0.DigiBank.com
    # tlsCACerts:
      # path: /home/hyper/fabric/fabric-paper-sdk/crypto-config/peerOrganizations/DigiBank.com/tlsca/tlsca.DigiBank.com-cert.pem

# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca-MagnetoCorp.com:
    url: https://localhost:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false
    tlsCACerts:
      path: /home/hyper/fabric/fabric-paper-sdk/crypto-config/peerOrganizations/MagnetoCorp.com/tlsca/tlsca.MagnetoCorp.com-cert.pem

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    # caName: ca-MagnetoCorp

  # ca-DigiBank:
    # url: https://localhost:8054
    # httpOptions:
      # verify: false
    # tlsCACerts:
      # path: /home/hyper/fabric/fabric-paper-sdk/crypto-config/peerOrganizations/DigiBank.com/tlsca/tlsca.DigiBank.com-cert.pem
    # registrar:
      # - enrollId: admin
        # enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    # caName: ca-digibank
    
    
